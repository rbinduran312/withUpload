{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DJACTOR\\\\Documents\\\\work\\\\withUpload-master\\\\client\\\\src\\\\components\\\\uploader\\\\Upload.js\";\nimport React, { Component } from \"react\";\nimport Dropzone from \"./Dropzone\";\nimport \"./Upload.css\";\nimport Progress from \"./Progress\";\nimport { CognitoUserPool, CognitoUser, AuthenticationDetails, CognitoIdToken } from 'amazon-cognito-identity-js';\nimport axios from 'axios';\nimport { stringLiteral } from \"@babel/types\";\nconst UserPoolId = 'us-east-1_Nyqobq2qH';\nconst ClientId = '34524dvl31gse4v09bnejt0499';\nconst ApiGatewayUrl = 'https://i36ip33cnh.execute-api.us-east-1.amazonaws.com/production/';\nconst userPool = new CognitoUserPool({\n  UserPoolId: UserPoolId,\n  ClientId: ClientId\n});\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false,\n      //username: '',\n      //password: '',\n      accessToken: '',\n      isAuthenticated: true //isLoginFailed: false,\n\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      console.log('onDrop' + file); // first get the pre-signed URL\n      //this.state.accessToken = \n\n      let data = {\n        'name': file.name\n      };\n      axios.post(ApiGatewayUrl, data, {\n        headers: {\n          Authorization: this.state.accessToken\n        }\n      }).then(response => {\n        // now do a PUT request to the pre-signed URL\n        console.log('Presigned URL' + response.data);\n        const options = {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          onUploadProgress: progressEvent => {\n            console.log(progressEvent.loaded);\n            console.log(progressEvent.total);\n\n            if (progressEvent.lengthComputable) {\n              const copy = { ...this.state.uploadProgress\n              };\n              copy[file.name] = {\n                state: \"pending\",\n                percentage: progressEvent.loaded / progressEvent.total * 100\n              };\n              this.setState({\n                uploadProgress: copy\n              });\n            }\n          }\n        };\n        const signed_url = response.data;\n        axios.put(signed_url, file, options).then(response => {\n          const copy = { ...this.state.uploadProgress\n          };\n          copy[file.name] = {\n            state: \"done\",\n            percentage: 100\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n          resolve(response);\n        });\n      });\n    });\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return React.createElement(\"div\", {\n        className: \"ProgressWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        progress: uploadProgress ? uploadProgress.percentage : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"CheckIcon\",\n        alt: \"done\",\n        src: \"baseline-check_circle_outline-24px.svg\",\n        style: {\n          opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }));\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return React.createElement(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Clear\");\n    } else {\n      return React.createElement(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Upload\");\n    }\n  } // is used by both login and password reset\n  // onSuccess = (result) => {\n  //   console.log(\"onSuccess\");\n  //   console.log(result);\n  //   this.setState({\n  //     accessToken: result.idToken.jwtToken, // the token used for subsequent, authorized requests\n  //     isAuthenticated: true,\n  //     isLoginFailed: false,\n  //   });\n  // };\n  // // is used by both login and password reset\n  // onFailure = (error) => {\n  //   console.log(\"onFailure\");\n  //   console.log(error);\n  //   this.setState({\n  //     isAuthenticated: false,\n  //     isLoginFailed: true,\n  //     statusCode: '',\n  //   });\n  // };\n  // onSubmit = (event) => {\n  //   event.preventDefault();\n  //   let cognitoUser = new CognitoUser({\n  //     Username: this.state.username,\n  //     Pool: userPool,\n  //   });\n  //   const authenticationDetails = new AuthenticationDetails({\n  //     Username: this.state.username,\n  //     Password: this.state.password,\n  //   });\n  //   cognitoUser.authenticateUser(authenticationDetails, {\n  //     onSuccess: this.onSuccess,\n  //     onFailure: this.onFailure,\n  //     newPasswordRequired: (userAttributes, requiredAttributes) => {\n  //       console.log(\"newPasswordRequired\");\n  //       console.log(userAttributes);\n  //       // not interesting for this demo - add a bogus e-mail and append an X to the initial password\n  //       userAttributes['email'] = 'robinson@example.com';\n  //       cognitoUser.completeNewPasswordChallenge(this.state.password + 'X', {}, this);\n  //     },\n  //   });\n  // };\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.state.files.map(file => {\n      return React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Filename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, file.name), this.renderProgress(file));\n    }))), React.createElement(\"div\", {\n      className: \"Actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.renderActions()));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["C:/Users/DJACTOR/Documents/work/withUpload-master/client/src/components/uploader/Upload.js"],"names":["React","Component","Dropzone","Progress","CognitoUserPool","CognitoUser","AuthenticationDetails","CognitoIdToken","axios","stringLiteral","UserPoolId","ClientId","ApiGatewayUrl","userPool","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","accessToken","isAuthenticated","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","promises","forEach","file","push","Promise","all","e","resolve","reject","console","log","data","name","post","headers","Authorization","then","response","options","onUploadProgress","progressEvent","loaded","total","lengthComputable","copy","percentage","signed_url","put","renderProgress","opacity","length","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropzone from \"./Dropzone\";\r\nimport \"./Upload.css\";\r\nimport Progress from \"./Progress\";\r\nimport { CognitoUserPool, CognitoUser, AuthenticationDetails, CognitoIdToken } from 'amazon-cognito-identity-js';\r\nimport axios from 'axios';\r\nimport { stringLiteral } from \"@babel/types\";\r\nconst UserPoolId = 'us-east-1_Nyqobq2qH';\r\nconst ClientId = '34524dvl31gse4v09bnejt0499';\r\nconst ApiGatewayUrl = 'https://i36ip33cnh.execute-api.us-east-1.amazonaws.com/production/';\r\n\r\n\r\nconst userPool = new CognitoUserPool({\r\n  UserPoolId: UserPoolId,\r\n  ClientId: ClientId,\r\n});\r\n\r\n    \r\nclass Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: [],\r\n      uploading: false,\r\n      uploadProgress: {},\r\n      successfullUploaded: false,\r\n      //username: '',\r\n      //password: '',\r\n      accessToken: '',\r\n      isAuthenticated: true,\r\n      //isLoginFailed: false,\r\n    };\r\n\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n    this.sendRequest = this.sendRequest.bind(this);\r\n    this.renderActions = this.renderActions.bind(this);\r\n  }\r\n\r\n  onFilesAdded(files) {\r\n    this.setState(prevState => ({\r\n      files: prevState.files.concat(files)\r\n    }));\r\n  }\r\n\r\n  async uploadFiles() {\r\n    this.setState({ uploadProgress: {}, uploading: true });\r\n    const promises = [];\r\n    this.state.files.forEach(file => {\r\n      promises.push(this.sendRequest(file));\r\n    });\r\n    try {\r\n      await Promise.all(promises);\r\n\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    } catch (e) {\r\n      // Not Production ready! Do some error handling here instead...\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    }\r\n  }\r\n\r\n  sendRequest(file) {\r\n    return new Promise((resolve, reject) => {\r\n      console.log('onDrop' + file)\r\n      // first get the pre-signed URL\r\n\r\n      //this.state.accessToken = \r\n      let data = {\r\n        'name': file.name\r\n      }\r\n      axios.post(ApiGatewayUrl, data,\r\n          {headers: {Authorization: this.state.accessToken}}).then((response) => {\r\n          // now do a PUT request to the pre-signed URL\r\n          console.log('Presigned URL' + response.data)\r\n          const options = {\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n            onUploadProgress: (progressEvent) => {\r\n              console.log(progressEvent.loaded)\r\n              console.log(progressEvent.total)\r\n              if (progressEvent.lengthComputable) {\r\n                  const copy = { ...this.state.uploadProgress };\r\n                  copy[file.name] = {\r\n                    state: \"pending\",\r\n                    percentage: (progressEvent.loaded / progressEvent.total) * 100\r\n                  };\r\n                  this.setState({ uploadProgress: copy });\r\n                }\r\n            },\r\n          };\r\n        const signed_url = response.data\r\n          axios.put(signed_url, file, options)\r\n              .then((response) => {\r\n                const copy = { ...this.state.uploadProgress };\r\n                 copy[file.name] = { state: \"done\", percentage: 100 };\r\n                 this.setState({ uploadProgress: copy });\r\n                resolve(response);\r\n              });\r\n      });\r\n    })\r\n  }\r\n\r\n  renderProgress(file) {\r\n    const uploadProgress = this.state.uploadProgress[file.name];\r\n    if (this.state.uploading || this.state.successfullUploaded) {\r\n      return (\r\n        <div className=\"ProgressWrapper\">\r\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n          <img\r\n            className=\"CheckIcon\"\r\n            alt=\"done\"\r\n            src=\"baseline-check_circle_outline-24px.svg\"\r\n            style={{\r\n              opacity:\r\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderActions() {\r\n\r\n    if (this.state.successfullUploaded) {\r\n      return (\r\n        <button\r\n          onClick={() =>\r\n            this.setState({ files: [], successfullUploaded: false })\r\n          }\r\n        >\r\n          Clear\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          disabled={this.state.files.length < 0 || this.state.uploading}\r\n          onClick={this.uploadFiles}\r\n        >\r\n          Upload\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  // is used by both login and password reset\r\n  // onSuccess = (result) => {\r\n  //   console.log(\"onSuccess\");\r\n  //   console.log(result);\r\n  //   this.setState({\r\n  //     accessToken: result.idToken.jwtToken, // the token used for subsequent, authorized requests\r\n  //     isAuthenticated: true,\r\n  //     isLoginFailed: false,\r\n  //   });\r\n  // };\r\n\r\n  // // is used by both login and password reset\r\n  // onFailure = (error) => {\r\n  //   console.log(\"onFailure\");\r\n  //   console.log(error);\r\n  //   this.setState({\r\n  //     isAuthenticated: false,\r\n  //     isLoginFailed: true,\r\n  //     statusCode: '',\r\n  //   });\r\n  // };\r\n\r\n  // onSubmit = (event) => {\r\n  //   event.preventDefault();\r\n\r\n  //   let cognitoUser = new CognitoUser({\r\n  //     Username: this.state.username,\r\n  //     Pool: userPool,\r\n  //   });\r\n\r\n  //   const authenticationDetails = new AuthenticationDetails({\r\n  //     Username: this.state.username,\r\n  //     Password: this.state.password,\r\n  //   });\r\n\r\n  //   cognitoUser.authenticateUser(authenticationDetails, {\r\n  //     onSuccess: this.onSuccess,\r\n  //     onFailure: this.onFailure,\r\n  //     newPasswordRequired: (userAttributes, requiredAttributes) => {\r\n  //       console.log(\"newPasswordRequired\");\r\n  //       console.log(userAttributes);\r\n\r\n  //       // not interesting for this demo - add a bogus e-mail and append an X to the initial password\r\n  //       userAttributes['email'] = 'robinson@example.com';\r\n  //       cognitoUser.completeNewPasswordChallenge(this.state.password + 'X', {}, this);\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Upload\">\r\n        {/* <span className=\"Title\">Upload Files</span> */}\r\n        {/* <form onSubmit={this.onSubmit}>\r\n          <input type='text' value={this.state.username} onChange={(event) => this.setState({username: event.target.value})} placeholder='username' /><br />\r\n          <input type='password' value={this.state.password} onChange={(event) => this.setState({password: event.target.value})} placeholder='password' /><br />\r\n          <input type='submit' value='Login' />\r\n        </form> */}\r\n        <div className=\"Content\">\r\n          <div>\r\n            <Dropzone\r\n              onFilesAdded={this.onFilesAdded}\r\n              disabled={this.state.uploading || this.state.successfullUploaded}\r\n            />\r\n          </div>\r\n          <div className=\"Files\">\r\n            {this.state.files.map(file => {\r\n              return (\r\n                <div key={file.name} className=\"Row\">\r\n                  <span className=\"Filename\">{file.name}</span>\r\n                  {this.renderProgress(file)}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"Actions\">{this.renderActions()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n"]},"metadata":{},"sourceType":"module"}